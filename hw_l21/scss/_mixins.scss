@mixin imageCont ($imgContHgt, $imgContWht, $position:false, $overflow:false) {
	padding-bottom: math.div($imgContHgt,$imgContWht)*100%;
	@if $position {
		position: relative;
	}
	@if $overflow {
		overflow: hidden;
	}
}

@mixin title ($fontSz, $lineH, $fontW, $marginB) {
	font-size: $fontSz;
	font-weight: $fontW;
	line-height: $lineH;
	margin-bottom: $marginB;
}

//REM
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}
//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

//Адаптивное свойство
$maxWidth: 1920;
$maxWidthContainer: 1170;
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
	$addSize: $startSize - $minSize;
	@if $type==1 {
		//Только если меньше контейнера
		#{$property}: $startSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
		}
	} @else if $type==2 {
		//Только если больше контейнера
		#{$property}: $startSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
		}
	} @else {
		//Всегда
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}
//Использование
//@include adaptiv-value("padding",50 ,20 ,0 );
//"padding" - свойство которое будет динамически изменяться
//50 - начальное макетное значение
//20 - минимальное значение свойства
//0 -режим (меньше контейнера, больше контейнера, всегда) 0,1,2